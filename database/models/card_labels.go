// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CardLabel is an object representing the database table.
type CardLabel struct {
	ID     string `boil:"id" json:"id" toml:"id" yaml:"id"`
	Text   string `boil:"text" json:"text" toml:"text" yaml:"text"`
	Colour string `boil:"colour" json:"colour" toml:"colour" yaml:"colour"`
	CardID string `boil:"card_id" json:"card_id" toml:"card_id" yaml:"card_id"`

	R *cardLabelR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L cardLabelL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CardLabelColumns = struct {
	ID     string
	Text   string
	Colour string
	CardID string
}{
	ID:     "id",
	Text:   "text",
	Colour: "colour",
	CardID: "card_id",
}

var CardLabelTableColumns = struct {
	ID     string
	Text   string
	Colour string
	CardID string
}{
	ID:     "card_labels.id",
	Text:   "card_labels.text",
	Colour: "card_labels.colour",
	CardID: "card_labels.card_id",
}

// Generated where

var CardLabelWhere = struct {
	ID     whereHelperstring
	Text   whereHelperstring
	Colour whereHelperstring
	CardID whereHelperstring
}{
	ID:     whereHelperstring{field: "`card_labels`.`id`"},
	Text:   whereHelperstring{field: "`card_labels`.`text`"},
	Colour: whereHelperstring{field: "`card_labels`.`colour`"},
	CardID: whereHelperstring{field: "`card_labels`.`card_id`"},
}

// CardLabelRels is where relationship names are stored.
var CardLabelRels = struct {
	Card string
}{
	Card: "Card",
}

// cardLabelR is where relationships are stored.
type cardLabelR struct {
	Card *Card `boil:"Card" json:"Card" toml:"Card" yaml:"Card"`
}

// NewStruct creates a new relationship struct
func (*cardLabelR) NewStruct() *cardLabelR {
	return &cardLabelR{}
}

func (r *cardLabelR) GetCard() *Card {
	if r == nil {
		return nil
	}
	return r.Card
}

// cardLabelL is where Load methods for each relationship are stored.
type cardLabelL struct{}

var (
	cardLabelAllColumns            = []string{"id", "text", "colour", "card_id"}
	cardLabelColumnsWithoutDefault = []string{"id", "text", "colour", "card_id"}
	cardLabelColumnsWithDefault    = []string{}
	cardLabelPrimaryKeyColumns     = []string{"id"}
	cardLabelGeneratedColumns      = []string{}
)

type (
	// CardLabelSlice is an alias for a slice of pointers to CardLabel.
	// This should almost always be used instead of []CardLabel.
	CardLabelSlice []*CardLabel
	// CardLabelHook is the signature for custom CardLabel hook methods
	CardLabelHook func(boil.Executor, *CardLabel) error

	cardLabelQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	cardLabelType                 = reflect.TypeOf(&CardLabel{})
	cardLabelMapping              = queries.MakeStructMapping(cardLabelType)
	cardLabelPrimaryKeyMapping, _ = queries.BindMapping(cardLabelType, cardLabelMapping, cardLabelPrimaryKeyColumns)
	cardLabelInsertCacheMut       sync.RWMutex
	cardLabelInsertCache          = make(map[string]insertCache)
	cardLabelUpdateCacheMut       sync.RWMutex
	cardLabelUpdateCache          = make(map[string]updateCache)
	cardLabelUpsertCacheMut       sync.RWMutex
	cardLabelUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var cardLabelAfterSelectHooks []CardLabelHook

var cardLabelBeforeInsertHooks []CardLabelHook
var cardLabelAfterInsertHooks []CardLabelHook

var cardLabelBeforeUpdateHooks []CardLabelHook
var cardLabelAfterUpdateHooks []CardLabelHook

var cardLabelBeforeDeleteHooks []CardLabelHook
var cardLabelAfterDeleteHooks []CardLabelHook

var cardLabelBeforeUpsertHooks []CardLabelHook
var cardLabelAfterUpsertHooks []CardLabelHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CardLabel) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range cardLabelAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CardLabel) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range cardLabelBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CardLabel) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range cardLabelAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CardLabel) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range cardLabelBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CardLabel) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range cardLabelAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CardLabel) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range cardLabelBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CardLabel) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range cardLabelAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CardLabel) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range cardLabelBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CardLabel) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range cardLabelAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCardLabelHook registers your hook function for all future operations.
func AddCardLabelHook(hookPoint boil.HookPoint, cardLabelHook CardLabelHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		cardLabelAfterSelectHooks = append(cardLabelAfterSelectHooks, cardLabelHook)
	case boil.BeforeInsertHook:
		cardLabelBeforeInsertHooks = append(cardLabelBeforeInsertHooks, cardLabelHook)
	case boil.AfterInsertHook:
		cardLabelAfterInsertHooks = append(cardLabelAfterInsertHooks, cardLabelHook)
	case boil.BeforeUpdateHook:
		cardLabelBeforeUpdateHooks = append(cardLabelBeforeUpdateHooks, cardLabelHook)
	case boil.AfterUpdateHook:
		cardLabelAfterUpdateHooks = append(cardLabelAfterUpdateHooks, cardLabelHook)
	case boil.BeforeDeleteHook:
		cardLabelBeforeDeleteHooks = append(cardLabelBeforeDeleteHooks, cardLabelHook)
	case boil.AfterDeleteHook:
		cardLabelAfterDeleteHooks = append(cardLabelAfterDeleteHooks, cardLabelHook)
	case boil.BeforeUpsertHook:
		cardLabelBeforeUpsertHooks = append(cardLabelBeforeUpsertHooks, cardLabelHook)
	case boil.AfterUpsertHook:
		cardLabelAfterUpsertHooks = append(cardLabelAfterUpsertHooks, cardLabelHook)
	}
}

// One returns a single cardLabel record from the query.
func (q cardLabelQuery) One(exec boil.Executor) (*CardLabel, error) {
	o := &CardLabel{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for card_labels")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CardLabel records from the query.
func (q cardLabelQuery) All(exec boil.Executor) (CardLabelSlice, error) {
	var o []*CardLabel

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CardLabel slice")
	}

	if len(cardLabelAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CardLabel records in the query.
func (q cardLabelQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count card_labels rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q cardLabelQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if card_labels exists")
	}

	return count > 0, nil
}

// Card pointed to by the foreign key.
func (o *CardLabel) Card(mods ...qm.QueryMod) cardQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.CardID),
	}

	queryMods = append(queryMods, mods...)

	return Cards(queryMods...)
}

// LoadCard allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (cardLabelL) LoadCard(e boil.Executor, singular bool, maybeCardLabel interface{}, mods queries.Applicator) error {
	var slice []*CardLabel
	var object *CardLabel

	if singular {
		var ok bool
		object, ok = maybeCardLabel.(*CardLabel)
		if !ok {
			object = new(CardLabel)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCardLabel)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCardLabel))
			}
		}
	} else {
		s, ok := maybeCardLabel.(*[]*CardLabel)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCardLabel)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCardLabel))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &cardLabelR{}
		}
		args = append(args, object.CardID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &cardLabelR{}
			}

			for _, a := range args {
				if a == obj.CardID {
					continue Outer
				}
			}

			args = append(args, obj.CardID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`cards`),
		qm.WhereIn(`cards.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Card")
	}

	var resultSlice []*Card
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Card")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for cards")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for cards")
	}

	if len(cardAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Card = foreign
		if foreign.R == nil {
			foreign.R = &cardR{}
		}
		foreign.R.CardLabels = append(foreign.R.CardLabels, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CardID == foreign.ID {
				local.R.Card = foreign
				if foreign.R == nil {
					foreign.R = &cardR{}
				}
				foreign.R.CardLabels = append(foreign.R.CardLabels, local)
				break
			}
		}
	}

	return nil
}

// SetCard of the cardLabel to the related item.
// Sets o.R.Card to related.
// Adds o to related.R.CardLabels.
func (o *CardLabel) SetCard(exec boil.Executor, insert bool, related *Card) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `card_labels` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"card_id"}),
		strmangle.WhereClause("`", "`", 0, cardLabelPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CardID = related.ID
	if o.R == nil {
		o.R = &cardLabelR{
			Card: related,
		}
	} else {
		o.R.Card = related
	}

	if related.R == nil {
		related.R = &cardR{
			CardLabels: CardLabelSlice{o},
		}
	} else {
		related.R.CardLabels = append(related.R.CardLabels, o)
	}

	return nil
}

// CardLabels retrieves all the records using an executor.
func CardLabels(mods ...qm.QueryMod) cardLabelQuery {
	mods = append(mods, qm.From("`card_labels`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`card_labels`.*"})
	}

	return cardLabelQuery{q}
}

// FindCardLabel retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCardLabel(exec boil.Executor, iD string, selectCols ...string) (*CardLabel, error) {
	cardLabelObj := &CardLabel{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `card_labels` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, cardLabelObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from card_labels")
	}

	if err = cardLabelObj.doAfterSelectHooks(exec); err != nil {
		return cardLabelObj, err
	}

	return cardLabelObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CardLabel) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no card_labels provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cardLabelColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	cardLabelInsertCacheMut.RLock()
	cache, cached := cardLabelInsertCache[key]
	cardLabelInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			cardLabelAllColumns,
			cardLabelColumnsWithDefault,
			cardLabelColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(cardLabelType, cardLabelMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(cardLabelType, cardLabelMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `card_labels` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `card_labels` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `card_labels` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, cardLabelPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	_, err = exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into card_labels")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}
	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for card_labels")
	}

CacheNoHooks:
	if !cached {
		cardLabelInsertCacheMut.Lock()
		cardLabelInsertCache[key] = cache
		cardLabelInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the CardLabel.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CardLabel) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	cardLabelUpdateCacheMut.RLock()
	cache, cached := cardLabelUpdateCache[key]
	cardLabelUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			cardLabelAllColumns,
			cardLabelPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update card_labels, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `card_labels` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, cardLabelPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(cardLabelType, cardLabelMapping, append(wl, cardLabelPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update card_labels row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for card_labels")
	}

	if !cached {
		cardLabelUpdateCacheMut.Lock()
		cardLabelUpdateCache[key] = cache
		cardLabelUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q cardLabelQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for card_labels")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for card_labels")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CardLabelSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cardLabelPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `card_labels` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cardLabelPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in cardLabel slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all cardLabel")
	}
	return rowsAff, nil
}

var mySQLCardLabelUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CardLabel) Upsert(exec boil.Executor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no card_labels provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cardLabelColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCardLabelUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	cardLabelUpsertCacheMut.RLock()
	cache, cached := cardLabelUpsertCache[key]
	cardLabelUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			cardLabelAllColumns,
			cardLabelColumnsWithDefault,
			cardLabelColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			cardLabelAllColumns,
			cardLabelPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert card_labels, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`card_labels`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `card_labels` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(cardLabelType, cardLabelMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(cardLabelType, cardLabelMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	_, err = exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for card_labels")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(cardLabelType, cardLabelMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for card_labels")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}
	err = exec.QueryRow(cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for card_labels")
	}

CacheNoHooks:
	if !cached {
		cardLabelUpsertCacheMut.Lock()
		cardLabelUpsertCache[key] = cache
		cardLabelUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single CardLabel record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CardLabel) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CardLabel provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cardLabelPrimaryKeyMapping)
	sql := "DELETE FROM `card_labels` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from card_labels")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for card_labels")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q cardLabelQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no cardLabelQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from card_labels")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for card_labels")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CardLabelSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(cardLabelBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cardLabelPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `card_labels` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cardLabelPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cardLabel slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for card_labels")
	}

	if len(cardLabelAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CardLabel) Reload(exec boil.Executor) error {
	ret, err := FindCardLabel(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CardLabelSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CardLabelSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cardLabelPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `card_labels`.* FROM `card_labels` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cardLabelPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CardLabelSlice")
	}

	*o = slice

	return nil
}

// CardLabelExists checks if the CardLabel row exists.
func CardLabelExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `card_labels` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if card_labels exists")
	}

	return exists, nil
}

// Exists checks if the CardLabel row exists.
func (o *CardLabel) Exists(exec boil.Executor) (bool, error) {
	return CardLabelExists(exec, o.ID)
}
