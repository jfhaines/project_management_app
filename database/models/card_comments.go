// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CardComment is an object representing the database table.
type CardComment struct {
	ID     string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Text   string    `boil:"text" json:"text" toml:"text" yaml:"text"`
	Time   time.Time `boil:"time" json:"time" toml:"time" yaml:"time"`
	UserID string    `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	CardID string    `boil:"card_id" json:"card_id" toml:"card_id" yaml:"card_id"`

	R *cardCommentR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L cardCommentL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CardCommentColumns = struct {
	ID     string
	Text   string
	Time   string
	UserID string
	CardID string
}{
	ID:     "id",
	Text:   "text",
	Time:   "time",
	UserID: "user_id",
	CardID: "card_id",
}

var CardCommentTableColumns = struct {
	ID     string
	Text   string
	Time   string
	UserID string
	CardID string
}{
	ID:     "card_comments.id",
	Text:   "card_comments.text",
	Time:   "card_comments.time",
	UserID: "card_comments.user_id",
	CardID: "card_comments.card_id",
}

// Generated where

var CardCommentWhere = struct {
	ID     whereHelperstring
	Text   whereHelperstring
	Time   whereHelpertime_Time
	UserID whereHelperstring
	CardID whereHelperstring
}{
	ID:     whereHelperstring{field: "`card_comments`.`id`"},
	Text:   whereHelperstring{field: "`card_comments`.`text`"},
	Time:   whereHelpertime_Time{field: "`card_comments`.`time`"},
	UserID: whereHelperstring{field: "`card_comments`.`user_id`"},
	CardID: whereHelperstring{field: "`card_comments`.`card_id`"},
}

// CardCommentRels is where relationship names are stored.
var CardCommentRels = struct {
	User string
	Card string
}{
	User: "User",
	Card: "Card",
}

// cardCommentR is where relationships are stored.
type cardCommentR struct {
	User *User `boil:"User" json:"User" toml:"User" yaml:"User"`
	Card *Card `boil:"Card" json:"Card" toml:"Card" yaml:"Card"`
}

// NewStruct creates a new relationship struct
func (*cardCommentR) NewStruct() *cardCommentR {
	return &cardCommentR{}
}

func (r *cardCommentR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

func (r *cardCommentR) GetCard() *Card {
	if r == nil {
		return nil
	}
	return r.Card
}

// cardCommentL is where Load methods for each relationship are stored.
type cardCommentL struct{}

var (
	cardCommentAllColumns            = []string{"id", "text", "time", "user_id", "card_id"}
	cardCommentColumnsWithoutDefault = []string{"id", "text", "time", "user_id", "card_id"}
	cardCommentColumnsWithDefault    = []string{}
	cardCommentPrimaryKeyColumns     = []string{"id"}
	cardCommentGeneratedColumns      = []string{}
)

type (
	// CardCommentSlice is an alias for a slice of pointers to CardComment.
	// This should almost always be used instead of []CardComment.
	CardCommentSlice []*CardComment
	// CardCommentHook is the signature for custom CardComment hook methods
	CardCommentHook func(boil.Executor, *CardComment) error

	cardCommentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	cardCommentType                 = reflect.TypeOf(&CardComment{})
	cardCommentMapping              = queries.MakeStructMapping(cardCommentType)
	cardCommentPrimaryKeyMapping, _ = queries.BindMapping(cardCommentType, cardCommentMapping, cardCommentPrimaryKeyColumns)
	cardCommentInsertCacheMut       sync.RWMutex
	cardCommentInsertCache          = make(map[string]insertCache)
	cardCommentUpdateCacheMut       sync.RWMutex
	cardCommentUpdateCache          = make(map[string]updateCache)
	cardCommentUpsertCacheMut       sync.RWMutex
	cardCommentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var cardCommentAfterSelectHooks []CardCommentHook

var cardCommentBeforeInsertHooks []CardCommentHook
var cardCommentAfterInsertHooks []CardCommentHook

var cardCommentBeforeUpdateHooks []CardCommentHook
var cardCommentAfterUpdateHooks []CardCommentHook

var cardCommentBeforeDeleteHooks []CardCommentHook
var cardCommentAfterDeleteHooks []CardCommentHook

var cardCommentBeforeUpsertHooks []CardCommentHook
var cardCommentAfterUpsertHooks []CardCommentHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CardComment) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range cardCommentAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CardComment) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range cardCommentBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CardComment) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range cardCommentAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CardComment) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range cardCommentBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CardComment) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range cardCommentAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CardComment) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range cardCommentBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CardComment) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range cardCommentAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CardComment) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range cardCommentBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CardComment) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range cardCommentAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCardCommentHook registers your hook function for all future operations.
func AddCardCommentHook(hookPoint boil.HookPoint, cardCommentHook CardCommentHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		cardCommentAfterSelectHooks = append(cardCommentAfterSelectHooks, cardCommentHook)
	case boil.BeforeInsertHook:
		cardCommentBeforeInsertHooks = append(cardCommentBeforeInsertHooks, cardCommentHook)
	case boil.AfterInsertHook:
		cardCommentAfterInsertHooks = append(cardCommentAfterInsertHooks, cardCommentHook)
	case boil.BeforeUpdateHook:
		cardCommentBeforeUpdateHooks = append(cardCommentBeforeUpdateHooks, cardCommentHook)
	case boil.AfterUpdateHook:
		cardCommentAfterUpdateHooks = append(cardCommentAfterUpdateHooks, cardCommentHook)
	case boil.BeforeDeleteHook:
		cardCommentBeforeDeleteHooks = append(cardCommentBeforeDeleteHooks, cardCommentHook)
	case boil.AfterDeleteHook:
		cardCommentAfterDeleteHooks = append(cardCommentAfterDeleteHooks, cardCommentHook)
	case boil.BeforeUpsertHook:
		cardCommentBeforeUpsertHooks = append(cardCommentBeforeUpsertHooks, cardCommentHook)
	case boil.AfterUpsertHook:
		cardCommentAfterUpsertHooks = append(cardCommentAfterUpsertHooks, cardCommentHook)
	}
}

// One returns a single cardComment record from the query.
func (q cardCommentQuery) One(exec boil.Executor) (*CardComment, error) {
	o := &CardComment{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for card_comments")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CardComment records from the query.
func (q cardCommentQuery) All(exec boil.Executor) (CardCommentSlice, error) {
	var o []*CardComment

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CardComment slice")
	}

	if len(cardCommentAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CardComment records in the query.
func (q cardCommentQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count card_comments rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q cardCommentQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if card_comments exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *CardComment) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// Card pointed to by the foreign key.
func (o *CardComment) Card(mods ...qm.QueryMod) cardQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.CardID),
	}

	queryMods = append(queryMods, mods...)

	return Cards(queryMods...)
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (cardCommentL) LoadUser(e boil.Executor, singular bool, maybeCardComment interface{}, mods queries.Applicator) error {
	var slice []*CardComment
	var object *CardComment

	if singular {
		var ok bool
		object, ok = maybeCardComment.(*CardComment)
		if !ok {
			object = new(CardComment)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCardComment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCardComment))
			}
		}
	} else {
		s, ok := maybeCardComment.(*[]*CardComment)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCardComment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCardComment))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &cardCommentR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &cardCommentR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.CardComments = append(foreign.R.CardComments, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.CardComments = append(foreign.R.CardComments, local)
				break
			}
		}
	}

	return nil
}

// LoadCard allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (cardCommentL) LoadCard(e boil.Executor, singular bool, maybeCardComment interface{}, mods queries.Applicator) error {
	var slice []*CardComment
	var object *CardComment

	if singular {
		var ok bool
		object, ok = maybeCardComment.(*CardComment)
		if !ok {
			object = new(CardComment)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCardComment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCardComment))
			}
		}
	} else {
		s, ok := maybeCardComment.(*[]*CardComment)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCardComment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCardComment))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &cardCommentR{}
		}
		args = append(args, object.CardID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &cardCommentR{}
			}

			for _, a := range args {
				if a == obj.CardID {
					continue Outer
				}
			}

			args = append(args, obj.CardID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`cards`),
		qm.WhereIn(`cards.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Card")
	}

	var resultSlice []*Card
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Card")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for cards")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for cards")
	}

	if len(cardAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Card = foreign
		if foreign.R == nil {
			foreign.R = &cardR{}
		}
		foreign.R.CardComments = append(foreign.R.CardComments, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CardID == foreign.ID {
				local.R.Card = foreign
				if foreign.R == nil {
					foreign.R = &cardR{}
				}
				foreign.R.CardComments = append(foreign.R.CardComments, local)
				break
			}
		}
	}

	return nil
}

// SetUser of the cardComment to the related item.
// Sets o.R.User to related.
// Adds o to related.R.CardComments.
func (o *CardComment) SetUser(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `card_comments` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"user_id"}),
		strmangle.WhereClause("`", "`", 0, cardCommentPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &cardCommentR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			CardComments: CardCommentSlice{o},
		}
	} else {
		related.R.CardComments = append(related.R.CardComments, o)
	}

	return nil
}

// SetCard of the cardComment to the related item.
// Sets o.R.Card to related.
// Adds o to related.R.CardComments.
func (o *CardComment) SetCard(exec boil.Executor, insert bool, related *Card) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `card_comments` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"card_id"}),
		strmangle.WhereClause("`", "`", 0, cardCommentPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CardID = related.ID
	if o.R == nil {
		o.R = &cardCommentR{
			Card: related,
		}
	} else {
		o.R.Card = related
	}

	if related.R == nil {
		related.R = &cardR{
			CardComments: CardCommentSlice{o},
		}
	} else {
		related.R.CardComments = append(related.R.CardComments, o)
	}

	return nil
}

// CardComments retrieves all the records using an executor.
func CardComments(mods ...qm.QueryMod) cardCommentQuery {
	mods = append(mods, qm.From("`card_comments`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`card_comments`.*"})
	}

	return cardCommentQuery{q}
}

// FindCardComment retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCardComment(exec boil.Executor, iD string, selectCols ...string) (*CardComment, error) {
	cardCommentObj := &CardComment{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `card_comments` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, cardCommentObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from card_comments")
	}

	if err = cardCommentObj.doAfterSelectHooks(exec); err != nil {
		return cardCommentObj, err
	}

	return cardCommentObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CardComment) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no card_comments provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cardCommentColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	cardCommentInsertCacheMut.RLock()
	cache, cached := cardCommentInsertCache[key]
	cardCommentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			cardCommentAllColumns,
			cardCommentColumnsWithDefault,
			cardCommentColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(cardCommentType, cardCommentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(cardCommentType, cardCommentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `card_comments` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `card_comments` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `card_comments` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, cardCommentPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	_, err = exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into card_comments")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}
	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for card_comments")
	}

CacheNoHooks:
	if !cached {
		cardCommentInsertCacheMut.Lock()
		cardCommentInsertCache[key] = cache
		cardCommentInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the CardComment.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CardComment) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	cardCommentUpdateCacheMut.RLock()
	cache, cached := cardCommentUpdateCache[key]
	cardCommentUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			cardCommentAllColumns,
			cardCommentPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update card_comments, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `card_comments` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, cardCommentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(cardCommentType, cardCommentMapping, append(wl, cardCommentPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update card_comments row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for card_comments")
	}

	if !cached {
		cardCommentUpdateCacheMut.Lock()
		cardCommentUpdateCache[key] = cache
		cardCommentUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q cardCommentQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for card_comments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for card_comments")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CardCommentSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cardCommentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `card_comments` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cardCommentPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in cardComment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all cardComment")
	}
	return rowsAff, nil
}

var mySQLCardCommentUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CardComment) Upsert(exec boil.Executor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no card_comments provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cardCommentColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCardCommentUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	cardCommentUpsertCacheMut.RLock()
	cache, cached := cardCommentUpsertCache[key]
	cardCommentUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			cardCommentAllColumns,
			cardCommentColumnsWithDefault,
			cardCommentColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			cardCommentAllColumns,
			cardCommentPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert card_comments, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`card_comments`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `card_comments` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(cardCommentType, cardCommentMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(cardCommentType, cardCommentMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	_, err = exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for card_comments")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(cardCommentType, cardCommentMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for card_comments")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}
	err = exec.QueryRow(cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for card_comments")
	}

CacheNoHooks:
	if !cached {
		cardCommentUpsertCacheMut.Lock()
		cardCommentUpsertCache[key] = cache
		cardCommentUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single CardComment record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CardComment) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CardComment provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cardCommentPrimaryKeyMapping)
	sql := "DELETE FROM `card_comments` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from card_comments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for card_comments")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q cardCommentQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no cardCommentQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from card_comments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for card_comments")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CardCommentSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(cardCommentBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cardCommentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `card_comments` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cardCommentPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cardComment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for card_comments")
	}

	if len(cardCommentAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CardComment) Reload(exec boil.Executor) error {
	ret, err := FindCardComment(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CardCommentSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CardCommentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cardCommentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `card_comments`.* FROM `card_comments` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cardCommentPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CardCommentSlice")
	}

	*o = slice

	return nil
}

// CardCommentExists checks if the CardComment row exists.
func CardCommentExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `card_comments` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if card_comments exists")
	}

	return exists, nil
}

// Exists checks if the CardComment row exists.
func (o *CardComment) Exists(exec boil.Executor) (bool, error) {
	return CardCommentExists(exec, o.ID)
}
