// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Card is an object representing the database table.
type Card struct {
	ID          string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Title       string      `boil:"title" json:"title" toml:"title" yaml:"title"`
	Description null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	DateDue     null.Time   `boil:"date_due" json:"date_due,omitempty" toml:"date_due" yaml:"date_due,omitempty"`
	ColumnID    string      `boil:"column_id" json:"column_id" toml:"column_id" yaml:"column_id"`

	R *cardR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L cardL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CardColumns = struct {
	ID          string
	Title       string
	Description string
	DateDue     string
	ColumnID    string
}{
	ID:          "id",
	Title:       "title",
	Description: "description",
	DateDue:     "date_due",
	ColumnID:    "column_id",
}

var CardTableColumns = struct {
	ID          string
	Title       string
	Description string
	DateDue     string
	ColumnID    string
}{
	ID:          "cards.id",
	Title:       "cards.title",
	Description: "cards.description",
	DateDue:     "cards.date_due",
	ColumnID:    "cards.column_id",
}

// Generated where

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var CardWhere = struct {
	ID          whereHelperstring
	Title       whereHelperstring
	Description whereHelpernull_String
	DateDue     whereHelpernull_Time
	ColumnID    whereHelperstring
}{
	ID:          whereHelperstring{field: "`cards`.`id`"},
	Title:       whereHelperstring{field: "`cards`.`title`"},
	Description: whereHelpernull_String{field: "`cards`.`description`"},
	DateDue:     whereHelpernull_Time{field: "`cards`.`date_due`"},
	ColumnID:    whereHelperstring{field: "`cards`.`column_id`"},
}

// CardRels is where relationship names are stored.
var CardRels = struct {
	Column             string
	CardAttachments    string
	CardChecklistItems string
	CardComments       string
	CardLabels         string
	CardUsers          string
}{
	Column:             "Column",
	CardAttachments:    "CardAttachments",
	CardChecklistItems: "CardChecklistItems",
	CardComments:       "CardComments",
	CardLabels:         "CardLabels",
	CardUsers:          "CardUsers",
}

// cardR is where relationships are stored.
type cardR struct {
	Column             *Column                `boil:"Column" json:"Column" toml:"Column" yaml:"Column"`
	CardAttachments    CardAttachmentSlice    `boil:"CardAttachments" json:"CardAttachments" toml:"CardAttachments" yaml:"CardAttachments"`
	CardChecklistItems CardChecklistItemSlice `boil:"CardChecklistItems" json:"CardChecklistItems" toml:"CardChecklistItems" yaml:"CardChecklistItems"`
	CardComments       CardCommentSlice       `boil:"CardComments" json:"CardComments" toml:"CardComments" yaml:"CardComments"`
	CardLabels         CardLabelSlice         `boil:"CardLabels" json:"CardLabels" toml:"CardLabels" yaml:"CardLabels"`
	CardUsers          CardUserSlice          `boil:"CardUsers" json:"CardUsers" toml:"CardUsers" yaml:"CardUsers"`
}

// NewStruct creates a new relationship struct
func (*cardR) NewStruct() *cardR {
	return &cardR{}
}

func (r *cardR) GetColumn() *Column {
	if r == nil {
		return nil
	}
	return r.Column
}

func (r *cardR) GetCardAttachments() CardAttachmentSlice {
	if r == nil {
		return nil
	}
	return r.CardAttachments
}

func (r *cardR) GetCardChecklistItems() CardChecklistItemSlice {
	if r == nil {
		return nil
	}
	return r.CardChecklistItems
}

func (r *cardR) GetCardComments() CardCommentSlice {
	if r == nil {
		return nil
	}
	return r.CardComments
}

func (r *cardR) GetCardLabels() CardLabelSlice {
	if r == nil {
		return nil
	}
	return r.CardLabels
}

func (r *cardR) GetCardUsers() CardUserSlice {
	if r == nil {
		return nil
	}
	return r.CardUsers
}

// cardL is where Load methods for each relationship are stored.
type cardL struct{}

var (
	cardAllColumns            = []string{"id", "title", "description", "date_due", "column_id"}
	cardColumnsWithoutDefault = []string{"id", "title", "description", "date_due", "column_id"}
	cardColumnsWithDefault    = []string{}
	cardPrimaryKeyColumns     = []string{"id"}
	cardGeneratedColumns      = []string{}
)

type (
	// CardSlice is an alias for a slice of pointers to Card.
	// This should almost always be used instead of []Card.
	CardSlice []*Card
	// CardHook is the signature for custom Card hook methods
	CardHook func(boil.Executor, *Card) error

	cardQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	cardType                 = reflect.TypeOf(&Card{})
	cardMapping              = queries.MakeStructMapping(cardType)
	cardPrimaryKeyMapping, _ = queries.BindMapping(cardType, cardMapping, cardPrimaryKeyColumns)
	cardInsertCacheMut       sync.RWMutex
	cardInsertCache          = make(map[string]insertCache)
	cardUpdateCacheMut       sync.RWMutex
	cardUpdateCache          = make(map[string]updateCache)
	cardUpsertCacheMut       sync.RWMutex
	cardUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var cardAfterSelectHooks []CardHook

var cardBeforeInsertHooks []CardHook
var cardAfterInsertHooks []CardHook

var cardBeforeUpdateHooks []CardHook
var cardAfterUpdateHooks []CardHook

var cardBeforeDeleteHooks []CardHook
var cardAfterDeleteHooks []CardHook

var cardBeforeUpsertHooks []CardHook
var cardAfterUpsertHooks []CardHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Card) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range cardAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Card) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range cardBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Card) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range cardAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Card) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range cardBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Card) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range cardAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Card) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range cardBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Card) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range cardAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Card) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range cardBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Card) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range cardAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCardHook registers your hook function for all future operations.
func AddCardHook(hookPoint boil.HookPoint, cardHook CardHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		cardAfterSelectHooks = append(cardAfterSelectHooks, cardHook)
	case boil.BeforeInsertHook:
		cardBeforeInsertHooks = append(cardBeforeInsertHooks, cardHook)
	case boil.AfterInsertHook:
		cardAfterInsertHooks = append(cardAfterInsertHooks, cardHook)
	case boil.BeforeUpdateHook:
		cardBeforeUpdateHooks = append(cardBeforeUpdateHooks, cardHook)
	case boil.AfterUpdateHook:
		cardAfterUpdateHooks = append(cardAfterUpdateHooks, cardHook)
	case boil.BeforeDeleteHook:
		cardBeforeDeleteHooks = append(cardBeforeDeleteHooks, cardHook)
	case boil.AfterDeleteHook:
		cardAfterDeleteHooks = append(cardAfterDeleteHooks, cardHook)
	case boil.BeforeUpsertHook:
		cardBeforeUpsertHooks = append(cardBeforeUpsertHooks, cardHook)
	case boil.AfterUpsertHook:
		cardAfterUpsertHooks = append(cardAfterUpsertHooks, cardHook)
	}
}

// One returns a single card record from the query.
func (q cardQuery) One(exec boil.Executor) (*Card, error) {
	o := &Card{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for cards")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Card records from the query.
func (q cardQuery) All(exec boil.Executor) (CardSlice, error) {
	var o []*Card

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Card slice")
	}

	if len(cardAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Card records in the query.
func (q cardQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count cards rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q cardQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if cards exists")
	}

	return count > 0, nil
}

// Column pointed to by the foreign key.
func (o *Card) Column(mods ...qm.QueryMod) columnQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.ColumnID),
	}

	queryMods = append(queryMods, mods...)

	return Columns(queryMods...)
}

// CardAttachments retrieves all the card_attachment's CardAttachments with an executor.
func (o *Card) CardAttachments(mods ...qm.QueryMod) cardAttachmentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`card_attachments`.`card_id`=?", o.ID),
	)

	return CardAttachments(queryMods...)
}

// CardChecklistItems retrieves all the card_checklist_item's CardChecklistItems with an executor.
func (o *Card) CardChecklistItems(mods ...qm.QueryMod) cardChecklistItemQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`card_checklist_items`.`card_id`=?", o.ID),
	)

	return CardChecklistItems(queryMods...)
}

// CardComments retrieves all the card_comment's CardComments with an executor.
func (o *Card) CardComments(mods ...qm.QueryMod) cardCommentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`card_comments`.`card_id`=?", o.ID),
	)

	return CardComments(queryMods...)
}

// CardLabels retrieves all the card_label's CardLabels with an executor.
func (o *Card) CardLabels(mods ...qm.QueryMod) cardLabelQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`card_labels`.`card_id`=?", o.ID),
	)

	return CardLabels(queryMods...)
}

// CardUsers retrieves all the card_user's CardUsers with an executor.
func (o *Card) CardUsers(mods ...qm.QueryMod) cardUserQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`card_users`.`card_id`=?", o.ID),
	)

	return CardUsers(queryMods...)
}

// LoadColumn allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (cardL) LoadColumn(e boil.Executor, singular bool, maybeCard interface{}, mods queries.Applicator) error {
	var slice []*Card
	var object *Card

	if singular {
		var ok bool
		object, ok = maybeCard.(*Card)
		if !ok {
			object = new(Card)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCard)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCard))
			}
		}
	} else {
		s, ok := maybeCard.(*[]*Card)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCard)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCard))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &cardR{}
		}
		args = append(args, object.ColumnID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &cardR{}
			}

			for _, a := range args {
				if a == obj.ColumnID {
					continue Outer
				}
			}

			args = append(args, obj.ColumnID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`columns`),
		qm.WhereIn(`columns.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Column")
	}

	var resultSlice []*Column
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Column")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for columns")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for columns")
	}

	if len(columnAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Column = foreign
		if foreign.R == nil {
			foreign.R = &columnR{}
		}
		foreign.R.Cards = append(foreign.R.Cards, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ColumnID == foreign.ID {
				local.R.Column = foreign
				if foreign.R == nil {
					foreign.R = &columnR{}
				}
				foreign.R.Cards = append(foreign.R.Cards, local)
				break
			}
		}
	}

	return nil
}

// LoadCardAttachments allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (cardL) LoadCardAttachments(e boil.Executor, singular bool, maybeCard interface{}, mods queries.Applicator) error {
	var slice []*Card
	var object *Card

	if singular {
		var ok bool
		object, ok = maybeCard.(*Card)
		if !ok {
			object = new(Card)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCard)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCard))
			}
		}
	} else {
		s, ok := maybeCard.(*[]*Card)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCard)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCard))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &cardR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &cardR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`card_attachments`),
		qm.WhereIn(`card_attachments.card_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load card_attachments")
	}

	var resultSlice []*CardAttachment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice card_attachments")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on card_attachments")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for card_attachments")
	}

	if len(cardAttachmentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CardAttachments = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &cardAttachmentR{}
			}
			foreign.R.Card = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CardID {
				local.R.CardAttachments = append(local.R.CardAttachments, foreign)
				if foreign.R == nil {
					foreign.R = &cardAttachmentR{}
				}
				foreign.R.Card = local
				break
			}
		}
	}

	return nil
}

// LoadCardChecklistItems allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (cardL) LoadCardChecklistItems(e boil.Executor, singular bool, maybeCard interface{}, mods queries.Applicator) error {
	var slice []*Card
	var object *Card

	if singular {
		var ok bool
		object, ok = maybeCard.(*Card)
		if !ok {
			object = new(Card)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCard)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCard))
			}
		}
	} else {
		s, ok := maybeCard.(*[]*Card)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCard)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCard))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &cardR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &cardR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`card_checklist_items`),
		qm.WhereIn(`card_checklist_items.card_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load card_checklist_items")
	}

	var resultSlice []*CardChecklistItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice card_checklist_items")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on card_checklist_items")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for card_checklist_items")
	}

	if len(cardChecklistItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CardChecklistItems = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &cardChecklistItemR{}
			}
			foreign.R.Card = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CardID {
				local.R.CardChecklistItems = append(local.R.CardChecklistItems, foreign)
				if foreign.R == nil {
					foreign.R = &cardChecklistItemR{}
				}
				foreign.R.Card = local
				break
			}
		}
	}

	return nil
}

// LoadCardComments allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (cardL) LoadCardComments(e boil.Executor, singular bool, maybeCard interface{}, mods queries.Applicator) error {
	var slice []*Card
	var object *Card

	if singular {
		var ok bool
		object, ok = maybeCard.(*Card)
		if !ok {
			object = new(Card)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCard)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCard))
			}
		}
	} else {
		s, ok := maybeCard.(*[]*Card)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCard)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCard))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &cardR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &cardR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`card_comments`),
		qm.WhereIn(`card_comments.card_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load card_comments")
	}

	var resultSlice []*CardComment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice card_comments")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on card_comments")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for card_comments")
	}

	if len(cardCommentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CardComments = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &cardCommentR{}
			}
			foreign.R.Card = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CardID {
				local.R.CardComments = append(local.R.CardComments, foreign)
				if foreign.R == nil {
					foreign.R = &cardCommentR{}
				}
				foreign.R.Card = local
				break
			}
		}
	}

	return nil
}

// LoadCardLabels allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (cardL) LoadCardLabels(e boil.Executor, singular bool, maybeCard interface{}, mods queries.Applicator) error {
	var slice []*Card
	var object *Card

	if singular {
		var ok bool
		object, ok = maybeCard.(*Card)
		if !ok {
			object = new(Card)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCard)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCard))
			}
		}
	} else {
		s, ok := maybeCard.(*[]*Card)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCard)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCard))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &cardR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &cardR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`card_labels`),
		qm.WhereIn(`card_labels.card_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load card_labels")
	}

	var resultSlice []*CardLabel
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice card_labels")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on card_labels")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for card_labels")
	}

	if len(cardLabelAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CardLabels = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &cardLabelR{}
			}
			foreign.R.Card = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CardID {
				local.R.CardLabels = append(local.R.CardLabels, foreign)
				if foreign.R == nil {
					foreign.R = &cardLabelR{}
				}
				foreign.R.Card = local
				break
			}
		}
	}

	return nil
}

// LoadCardUsers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (cardL) LoadCardUsers(e boil.Executor, singular bool, maybeCard interface{}, mods queries.Applicator) error {
	var slice []*Card
	var object *Card

	if singular {
		var ok bool
		object, ok = maybeCard.(*Card)
		if !ok {
			object = new(Card)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCard)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCard))
			}
		}
	} else {
		s, ok := maybeCard.(*[]*Card)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCard)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCard))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &cardR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &cardR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`card_users`),
		qm.WhereIn(`card_users.card_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load card_users")
	}

	var resultSlice []*CardUser
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice card_users")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on card_users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for card_users")
	}

	if len(cardUserAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CardUsers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &cardUserR{}
			}
			foreign.R.Card = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CardID {
				local.R.CardUsers = append(local.R.CardUsers, foreign)
				if foreign.R == nil {
					foreign.R = &cardUserR{}
				}
				foreign.R.Card = local
				break
			}
		}
	}

	return nil
}

// SetColumn of the card to the related item.
// Sets o.R.Column to related.
// Adds o to related.R.Cards.
func (o *Card) SetColumn(exec boil.Executor, insert bool, related *Column) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `cards` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"column_id"}),
		strmangle.WhereClause("`", "`", 0, cardPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ColumnID = related.ID
	if o.R == nil {
		o.R = &cardR{
			Column: related,
		}
	} else {
		o.R.Column = related
	}

	if related.R == nil {
		related.R = &columnR{
			Cards: CardSlice{o},
		}
	} else {
		related.R.Cards = append(related.R.Cards, o)
	}

	return nil
}

// AddCardAttachments adds the given related objects to the existing relationships
// of the card, optionally inserting them as new records.
// Appends related to o.R.CardAttachments.
// Sets related.R.Card appropriately.
func (o *Card) AddCardAttachments(exec boil.Executor, insert bool, related ...*CardAttachment) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CardID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `card_attachments` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"card_id"}),
				strmangle.WhereClause("`", "`", 0, cardAttachmentPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CardID = o.ID
		}
	}

	if o.R == nil {
		o.R = &cardR{
			CardAttachments: related,
		}
	} else {
		o.R.CardAttachments = append(o.R.CardAttachments, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &cardAttachmentR{
				Card: o,
			}
		} else {
			rel.R.Card = o
		}
	}
	return nil
}

// AddCardChecklistItems adds the given related objects to the existing relationships
// of the card, optionally inserting them as new records.
// Appends related to o.R.CardChecklistItems.
// Sets related.R.Card appropriately.
func (o *Card) AddCardChecklistItems(exec boil.Executor, insert bool, related ...*CardChecklistItem) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CardID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `card_checklist_items` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"card_id"}),
				strmangle.WhereClause("`", "`", 0, cardChecklistItemPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CardID = o.ID
		}
	}

	if o.R == nil {
		o.R = &cardR{
			CardChecklistItems: related,
		}
	} else {
		o.R.CardChecklistItems = append(o.R.CardChecklistItems, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &cardChecklistItemR{
				Card: o,
			}
		} else {
			rel.R.Card = o
		}
	}
	return nil
}

// AddCardComments adds the given related objects to the existing relationships
// of the card, optionally inserting them as new records.
// Appends related to o.R.CardComments.
// Sets related.R.Card appropriately.
func (o *Card) AddCardComments(exec boil.Executor, insert bool, related ...*CardComment) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CardID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `card_comments` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"card_id"}),
				strmangle.WhereClause("`", "`", 0, cardCommentPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CardID = o.ID
		}
	}

	if o.R == nil {
		o.R = &cardR{
			CardComments: related,
		}
	} else {
		o.R.CardComments = append(o.R.CardComments, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &cardCommentR{
				Card: o,
			}
		} else {
			rel.R.Card = o
		}
	}
	return nil
}

// AddCardLabels adds the given related objects to the existing relationships
// of the card, optionally inserting them as new records.
// Appends related to o.R.CardLabels.
// Sets related.R.Card appropriately.
func (o *Card) AddCardLabels(exec boil.Executor, insert bool, related ...*CardLabel) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CardID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `card_labels` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"card_id"}),
				strmangle.WhereClause("`", "`", 0, cardLabelPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CardID = o.ID
		}
	}

	if o.R == nil {
		o.R = &cardR{
			CardLabels: related,
		}
	} else {
		o.R.CardLabels = append(o.R.CardLabels, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &cardLabelR{
				Card: o,
			}
		} else {
			rel.R.Card = o
		}
	}
	return nil
}

// AddCardUsers adds the given related objects to the existing relationships
// of the card, optionally inserting them as new records.
// Appends related to o.R.CardUsers.
// Sets related.R.Card appropriately.
func (o *Card) AddCardUsers(exec boil.Executor, insert bool, related ...*CardUser) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CardID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `card_users` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"card_id"}),
				strmangle.WhereClause("`", "`", 0, cardUserPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CardID = o.ID
		}
	}

	if o.R == nil {
		o.R = &cardR{
			CardUsers: related,
		}
	} else {
		o.R.CardUsers = append(o.R.CardUsers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &cardUserR{
				Card: o,
			}
		} else {
			rel.R.Card = o
		}
	}
	return nil
}

// Cards retrieves all the records using an executor.
func Cards(mods ...qm.QueryMod) cardQuery {
	mods = append(mods, qm.From("`cards`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`cards`.*"})
	}

	return cardQuery{q}
}

// FindCard retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCard(exec boil.Executor, iD string, selectCols ...string) (*Card, error) {
	cardObj := &Card{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `cards` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, cardObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from cards")
	}

	if err = cardObj.doAfterSelectHooks(exec); err != nil {
		return cardObj, err
	}

	return cardObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Card) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cards provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cardColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	cardInsertCacheMut.RLock()
	cache, cached := cardInsertCache[key]
	cardInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			cardAllColumns,
			cardColumnsWithDefault,
			cardColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(cardType, cardMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(cardType, cardMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `cards` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `cards` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `cards` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, cardPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	_, err = exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into cards")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}
	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cards")
	}

CacheNoHooks:
	if !cached {
		cardInsertCacheMut.Lock()
		cardInsertCache[key] = cache
		cardInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the Card.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Card) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	cardUpdateCacheMut.RLock()
	cache, cached := cardUpdateCache[key]
	cardUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			cardAllColumns,
			cardPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update cards, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `cards` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, cardPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(cardType, cardMapping, append(wl, cardPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update cards row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for cards")
	}

	if !cached {
		cardUpdateCacheMut.Lock()
		cardUpdateCache[key] = cache
		cardUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q cardQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for cards")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for cards")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CardSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cardPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `cards` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cardPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in card slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all card")
	}
	return rowsAff, nil
}

var mySQLCardUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Card) Upsert(exec boil.Executor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cards provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cardColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCardUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	cardUpsertCacheMut.RLock()
	cache, cached := cardUpsertCache[key]
	cardUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			cardAllColumns,
			cardColumnsWithDefault,
			cardColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			cardAllColumns,
			cardPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert cards, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`cards`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `cards` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(cardType, cardMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(cardType, cardMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	_, err = exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for cards")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(cardType, cardMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for cards")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}
	err = exec.QueryRow(cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cards")
	}

CacheNoHooks:
	if !cached {
		cardUpsertCacheMut.Lock()
		cardUpsertCache[key] = cache
		cardUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single Card record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Card) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Card provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cardPrimaryKeyMapping)
	sql := "DELETE FROM `cards` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from cards")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for cards")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q cardQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no cardQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cards")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cards")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CardSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(cardBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cardPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `cards` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cardPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from card slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cards")
	}

	if len(cardAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Card) Reload(exec boil.Executor) error {
	ret, err := FindCard(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CardSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CardSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cardPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `cards`.* FROM `cards` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cardPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CardSlice")
	}

	*o = slice

	return nil
}

// CardExists checks if the Card row exists.
func CardExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `cards` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if cards exists")
	}

	return exists, nil
}

// Exists checks if the Card row exists.
func (o *Card) Exists(exec boil.Executor) (bool, error) {
	return CardExists(exec, o.ID)
}
