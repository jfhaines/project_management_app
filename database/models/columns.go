// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Column is an object representing the database table.
type Column struct {
	ID      string `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name    string `boil:"name" json:"name" toml:"name" yaml:"name"`
	BoardID string `boil:"board_id" json:"board_id" toml:"board_id" yaml:"board_id"`

	R *columnR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L columnL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ColumnColumns = struct {
	ID      string
	Name    string
	BoardID string
}{
	ID:      "id",
	Name:    "name",
	BoardID: "board_id",
}

var ColumnTableColumns = struct {
	ID      string
	Name    string
	BoardID string
}{
	ID:      "columns.id",
	Name:    "columns.name",
	BoardID: "columns.board_id",
}

// Generated where

var ColumnWhere = struct {
	ID      whereHelperstring
	Name    whereHelperstring
	BoardID whereHelperstring
}{
	ID:      whereHelperstring{field: "`columns`.`id`"},
	Name:    whereHelperstring{field: "`columns`.`name`"},
	BoardID: whereHelperstring{field: "`columns`.`board_id`"},
}

// ColumnRels is where relationship names are stored.
var ColumnRels = struct {
	Board string
	Cards string
}{
	Board: "Board",
	Cards: "Cards",
}

// columnR is where relationships are stored.
type columnR struct {
	Board *Board    `boil:"Board" json:"Board" toml:"Board" yaml:"Board"`
	Cards CardSlice `boil:"Cards" json:"Cards" toml:"Cards" yaml:"Cards"`
}

// NewStruct creates a new relationship struct
func (*columnR) NewStruct() *columnR {
	return &columnR{}
}

func (r *columnR) GetBoard() *Board {
	if r == nil {
		return nil
	}
	return r.Board
}

func (r *columnR) GetCards() CardSlice {
	if r == nil {
		return nil
	}
	return r.Cards
}

// columnL is where Load methods for each relationship are stored.
type columnL struct{}

var (
	columnAllColumns            = []string{"id", "name", "board_id"}
	columnColumnsWithoutDefault = []string{"id", "name", "board_id"}
	columnColumnsWithDefault    = []string{}
	columnPrimaryKeyColumns     = []string{"id"}
	columnGeneratedColumns      = []string{}
)

type (
	// ColumnSlice is an alias for a slice of pointers to Column.
	// This should almost always be used instead of []Column.
	ColumnSlice []*Column
	// ColumnHook is the signature for custom Column hook methods
	ColumnHook func(boil.Executor, *Column) error

	columnQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	columnType                 = reflect.TypeOf(&Column{})
	columnMapping              = queries.MakeStructMapping(columnType)
	columnPrimaryKeyMapping, _ = queries.BindMapping(columnType, columnMapping, columnPrimaryKeyColumns)
	columnInsertCacheMut       sync.RWMutex
	columnInsertCache          = make(map[string]insertCache)
	columnUpdateCacheMut       sync.RWMutex
	columnUpdateCache          = make(map[string]updateCache)
	columnUpsertCacheMut       sync.RWMutex
	columnUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var columnAfterSelectHooks []ColumnHook

var columnBeforeInsertHooks []ColumnHook
var columnAfterInsertHooks []ColumnHook

var columnBeforeUpdateHooks []ColumnHook
var columnAfterUpdateHooks []ColumnHook

var columnBeforeDeleteHooks []ColumnHook
var columnAfterDeleteHooks []ColumnHook

var columnBeforeUpsertHooks []ColumnHook
var columnAfterUpsertHooks []ColumnHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Column) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range columnAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Column) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range columnBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Column) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range columnAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Column) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range columnBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Column) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range columnAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Column) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range columnBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Column) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range columnAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Column) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range columnBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Column) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range columnAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddColumnHook registers your hook function for all future operations.
func AddColumnHook(hookPoint boil.HookPoint, columnHook ColumnHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		columnAfterSelectHooks = append(columnAfterSelectHooks, columnHook)
	case boil.BeforeInsertHook:
		columnBeforeInsertHooks = append(columnBeforeInsertHooks, columnHook)
	case boil.AfterInsertHook:
		columnAfterInsertHooks = append(columnAfterInsertHooks, columnHook)
	case boil.BeforeUpdateHook:
		columnBeforeUpdateHooks = append(columnBeforeUpdateHooks, columnHook)
	case boil.AfterUpdateHook:
		columnAfterUpdateHooks = append(columnAfterUpdateHooks, columnHook)
	case boil.BeforeDeleteHook:
		columnBeforeDeleteHooks = append(columnBeforeDeleteHooks, columnHook)
	case boil.AfterDeleteHook:
		columnAfterDeleteHooks = append(columnAfterDeleteHooks, columnHook)
	case boil.BeforeUpsertHook:
		columnBeforeUpsertHooks = append(columnBeforeUpsertHooks, columnHook)
	case boil.AfterUpsertHook:
		columnAfterUpsertHooks = append(columnAfterUpsertHooks, columnHook)
	}
}

// One returns a single column record from the query.
func (q columnQuery) One(exec boil.Executor) (*Column, error) {
	o := &Column{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for columns")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Column records from the query.
func (q columnQuery) All(exec boil.Executor) (ColumnSlice, error) {
	var o []*Column

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Column slice")
	}

	if len(columnAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Column records in the query.
func (q columnQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count columns rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q columnQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if columns exists")
	}

	return count > 0, nil
}

// Board pointed to by the foreign key.
func (o *Column) Board(mods ...qm.QueryMod) boardQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.BoardID),
	}

	queryMods = append(queryMods, mods...)

	return Boards(queryMods...)
}

// Cards retrieves all the card's Cards with an executor.
func (o *Column) Cards(mods ...qm.QueryMod) cardQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`cards`.`column_id`=?", o.ID),
	)

	return Cards(queryMods...)
}

// LoadBoard allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (columnL) LoadBoard(e boil.Executor, singular bool, maybeColumn interface{}, mods queries.Applicator) error {
	var slice []*Column
	var object *Column

	if singular {
		var ok bool
		object, ok = maybeColumn.(*Column)
		if !ok {
			object = new(Column)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeColumn)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeColumn))
			}
		}
	} else {
		s, ok := maybeColumn.(*[]*Column)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeColumn)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeColumn))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &columnR{}
		}
		args = append(args, object.BoardID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &columnR{}
			}

			for _, a := range args {
				if a == obj.BoardID {
					continue Outer
				}
			}

			args = append(args, obj.BoardID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`boards`),
		qm.WhereIn(`boards.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Board")
	}

	var resultSlice []*Board
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Board")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for boards")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for boards")
	}

	if len(boardAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Board = foreign
		if foreign.R == nil {
			foreign.R = &boardR{}
		}
		foreign.R.Columns = append(foreign.R.Columns, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BoardID == foreign.ID {
				local.R.Board = foreign
				if foreign.R == nil {
					foreign.R = &boardR{}
				}
				foreign.R.Columns = append(foreign.R.Columns, local)
				break
			}
		}
	}

	return nil
}

// LoadCards allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (columnL) LoadCards(e boil.Executor, singular bool, maybeColumn interface{}, mods queries.Applicator) error {
	var slice []*Column
	var object *Column

	if singular {
		var ok bool
		object, ok = maybeColumn.(*Column)
		if !ok {
			object = new(Column)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeColumn)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeColumn))
			}
		}
	} else {
		s, ok := maybeColumn.(*[]*Column)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeColumn)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeColumn))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &columnR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &columnR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`cards`),
		qm.WhereIn(`cards.column_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load cards")
	}

	var resultSlice []*Card
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice cards")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on cards")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for cards")
	}

	if len(cardAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Cards = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &cardR{}
			}
			foreign.R.Column = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ColumnID {
				local.R.Cards = append(local.R.Cards, foreign)
				if foreign.R == nil {
					foreign.R = &cardR{}
				}
				foreign.R.Column = local
				break
			}
		}
	}

	return nil
}

// SetBoard of the column to the related item.
// Sets o.R.Board to related.
// Adds o to related.R.Columns.
func (o *Column) SetBoard(exec boil.Executor, insert bool, related *Board) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `columns` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"board_id"}),
		strmangle.WhereClause("`", "`", 0, columnPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BoardID = related.ID
	if o.R == nil {
		o.R = &columnR{
			Board: related,
		}
	} else {
		o.R.Board = related
	}

	if related.R == nil {
		related.R = &boardR{
			Columns: ColumnSlice{o},
		}
	} else {
		related.R.Columns = append(related.R.Columns, o)
	}

	return nil
}

// AddCards adds the given related objects to the existing relationships
// of the column, optionally inserting them as new records.
// Appends related to o.R.Cards.
// Sets related.R.Column appropriately.
func (o *Column) AddCards(exec boil.Executor, insert bool, related ...*Card) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ColumnID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `cards` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"column_id"}),
				strmangle.WhereClause("`", "`", 0, cardPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ColumnID = o.ID
		}
	}

	if o.R == nil {
		o.R = &columnR{
			Cards: related,
		}
	} else {
		o.R.Cards = append(o.R.Cards, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &cardR{
				Column: o,
			}
		} else {
			rel.R.Column = o
		}
	}
	return nil
}

// Columns retrieves all the records using an executor.
func Columns(mods ...qm.QueryMod) columnQuery {
	mods = append(mods, qm.From("`columns`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`columns`.*"})
	}

	return columnQuery{q}
}

// FindColumn retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindColumn(exec boil.Executor, iD string, selectCols ...string) (*Column, error) {
	columnObj := &Column{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `columns` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, columnObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from columns")
	}

	if err = columnObj.doAfterSelectHooks(exec); err != nil {
		return columnObj, err
	}

	return columnObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Column) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no columns provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(columnColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	columnInsertCacheMut.RLock()
	cache, cached := columnInsertCache[key]
	columnInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			columnAllColumns,
			columnColumnsWithDefault,
			columnColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(columnType, columnMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(columnType, columnMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `columns` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `columns` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `columns` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, columnPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	_, err = exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into columns")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}
	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for columns")
	}

CacheNoHooks:
	if !cached {
		columnInsertCacheMut.Lock()
		columnInsertCache[key] = cache
		columnInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the Column.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Column) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	columnUpdateCacheMut.RLock()
	cache, cached := columnUpdateCache[key]
	columnUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			columnAllColumns,
			columnPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update columns, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `columns` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, columnPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(columnType, columnMapping, append(wl, columnPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update columns row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for columns")
	}

	if !cached {
		columnUpdateCacheMut.Lock()
		columnUpdateCache[key] = cache
		columnUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q columnQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for columns")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for columns")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ColumnSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), columnPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `columns` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, columnPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in column slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all column")
	}
	return rowsAff, nil
}

var mySQLColumnUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Column) Upsert(exec boil.Executor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no columns provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(columnColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLColumnUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	columnUpsertCacheMut.RLock()
	cache, cached := columnUpsertCache[key]
	columnUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			columnAllColumns,
			columnColumnsWithDefault,
			columnColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			columnAllColumns,
			columnPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert columns, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`columns`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `columns` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(columnType, columnMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(columnType, columnMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	_, err = exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for columns")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(columnType, columnMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for columns")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}
	err = exec.QueryRow(cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for columns")
	}

CacheNoHooks:
	if !cached {
		columnUpsertCacheMut.Lock()
		columnUpsertCache[key] = cache
		columnUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single Column record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Column) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Column provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), columnPrimaryKeyMapping)
	sql := "DELETE FROM `columns` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from columns")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for columns")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q columnQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no columnQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from columns")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for columns")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ColumnSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(columnBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), columnPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `columns` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, columnPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from column slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for columns")
	}

	if len(columnAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Column) Reload(exec boil.Executor) error {
	ret, err := FindColumn(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ColumnSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ColumnSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), columnPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `columns`.* FROM `columns` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, columnPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ColumnSlice")
	}

	*o = slice

	return nil
}

// ColumnExists checks if the Column row exists.
func ColumnExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `columns` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if columns exists")
	}

	return exists, nil
}

// Exists checks if the Column row exists.
func (o *Column) Exists(exec boil.Executor) (bool, error) {
	return ColumnExists(exec, o.ID)
}
