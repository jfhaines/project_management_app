// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CardAttachment is an object representing the database table.
type CardAttachment struct {
	ID       int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Filename string    `boil:"filename" json:"filename" toml:"filename" yaml:"filename"`
	Time     time.Time `boil:"time" json:"time" toml:"time" yaml:"time"`
	CardID   int       `boil:"card_id" json:"card_id" toml:"card_id" yaml:"card_id"`
	UserID   int       `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`

	R *cardAttachmentR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L cardAttachmentL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CardAttachmentColumns = struct {
	ID       string
	Filename string
	Time     string
	CardID   string
	UserID   string
}{
	ID:       "id",
	Filename: "filename",
	Time:     "time",
	CardID:   "card_id",
	UserID:   "user_id",
}

var CardAttachmentTableColumns = struct {
	ID       string
	Filename string
	Time     string
	CardID   string
	UserID   string
}{
	ID:       "card_attachments.id",
	Filename: "card_attachments.filename",
	Time:     "card_attachments.time",
	CardID:   "card_attachments.card_id",
	UserID:   "card_attachments.user_id",
}

// Generated where

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var CardAttachmentWhere = struct {
	ID       whereHelperint
	Filename whereHelperstring
	Time     whereHelpertime_Time
	CardID   whereHelperint
	UserID   whereHelperint
}{
	ID:       whereHelperint{field: "`card_attachments`.`id`"},
	Filename: whereHelperstring{field: "`card_attachments`.`filename`"},
	Time:     whereHelpertime_Time{field: "`card_attachments`.`time`"},
	CardID:   whereHelperint{field: "`card_attachments`.`card_id`"},
	UserID:   whereHelperint{field: "`card_attachments`.`user_id`"},
}

// CardAttachmentRels is where relationship names are stored.
var CardAttachmentRels = struct {
	Card string
	User string
}{
	Card: "Card",
	User: "User",
}

// cardAttachmentR is where relationships are stored.
type cardAttachmentR struct {
	Card *Card `boil:"Card" json:"Card" toml:"Card" yaml:"Card"`
	User *User `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*cardAttachmentR) NewStruct() *cardAttachmentR {
	return &cardAttachmentR{}
}

func (r *cardAttachmentR) GetCard() *Card {
	if r == nil {
		return nil
	}
	return r.Card
}

func (r *cardAttachmentR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

// cardAttachmentL is where Load methods for each relationship are stored.
type cardAttachmentL struct{}

var (
	cardAttachmentAllColumns            = []string{"id", "filename", "time", "card_id", "user_id"}
	cardAttachmentColumnsWithoutDefault = []string{"filename", "time", "card_id", "user_id"}
	cardAttachmentColumnsWithDefault    = []string{"id"}
	cardAttachmentPrimaryKeyColumns     = []string{"id"}
	cardAttachmentGeneratedColumns      = []string{}
)

type (
	// CardAttachmentSlice is an alias for a slice of pointers to CardAttachment.
	// This should almost always be used instead of []CardAttachment.
	CardAttachmentSlice []*CardAttachment
	// CardAttachmentHook is the signature for custom CardAttachment hook methods
	CardAttachmentHook func(boil.Executor, *CardAttachment) error

	cardAttachmentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	cardAttachmentType                 = reflect.TypeOf(&CardAttachment{})
	cardAttachmentMapping              = queries.MakeStructMapping(cardAttachmentType)
	cardAttachmentPrimaryKeyMapping, _ = queries.BindMapping(cardAttachmentType, cardAttachmentMapping, cardAttachmentPrimaryKeyColumns)
	cardAttachmentInsertCacheMut       sync.RWMutex
	cardAttachmentInsertCache          = make(map[string]insertCache)
	cardAttachmentUpdateCacheMut       sync.RWMutex
	cardAttachmentUpdateCache          = make(map[string]updateCache)
	cardAttachmentUpsertCacheMut       sync.RWMutex
	cardAttachmentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var cardAttachmentAfterSelectHooks []CardAttachmentHook

var cardAttachmentBeforeInsertHooks []CardAttachmentHook
var cardAttachmentAfterInsertHooks []CardAttachmentHook

var cardAttachmentBeforeUpdateHooks []CardAttachmentHook
var cardAttachmentAfterUpdateHooks []CardAttachmentHook

var cardAttachmentBeforeDeleteHooks []CardAttachmentHook
var cardAttachmentAfterDeleteHooks []CardAttachmentHook

var cardAttachmentBeforeUpsertHooks []CardAttachmentHook
var cardAttachmentAfterUpsertHooks []CardAttachmentHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CardAttachment) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range cardAttachmentAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CardAttachment) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range cardAttachmentBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CardAttachment) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range cardAttachmentAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CardAttachment) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range cardAttachmentBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CardAttachment) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range cardAttachmentAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CardAttachment) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range cardAttachmentBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CardAttachment) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range cardAttachmentAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CardAttachment) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range cardAttachmentBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CardAttachment) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range cardAttachmentAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCardAttachmentHook registers your hook function for all future operations.
func AddCardAttachmentHook(hookPoint boil.HookPoint, cardAttachmentHook CardAttachmentHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		cardAttachmentAfterSelectHooks = append(cardAttachmentAfterSelectHooks, cardAttachmentHook)
	case boil.BeforeInsertHook:
		cardAttachmentBeforeInsertHooks = append(cardAttachmentBeforeInsertHooks, cardAttachmentHook)
	case boil.AfterInsertHook:
		cardAttachmentAfterInsertHooks = append(cardAttachmentAfterInsertHooks, cardAttachmentHook)
	case boil.BeforeUpdateHook:
		cardAttachmentBeforeUpdateHooks = append(cardAttachmentBeforeUpdateHooks, cardAttachmentHook)
	case boil.AfterUpdateHook:
		cardAttachmentAfterUpdateHooks = append(cardAttachmentAfterUpdateHooks, cardAttachmentHook)
	case boil.BeforeDeleteHook:
		cardAttachmentBeforeDeleteHooks = append(cardAttachmentBeforeDeleteHooks, cardAttachmentHook)
	case boil.AfterDeleteHook:
		cardAttachmentAfterDeleteHooks = append(cardAttachmentAfterDeleteHooks, cardAttachmentHook)
	case boil.BeforeUpsertHook:
		cardAttachmentBeforeUpsertHooks = append(cardAttachmentBeforeUpsertHooks, cardAttachmentHook)
	case boil.AfterUpsertHook:
		cardAttachmentAfterUpsertHooks = append(cardAttachmentAfterUpsertHooks, cardAttachmentHook)
	}
}

// One returns a single cardAttachment record from the query.
func (q cardAttachmentQuery) One(exec boil.Executor) (*CardAttachment, error) {
	o := &CardAttachment{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for card_attachments")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CardAttachment records from the query.
func (q cardAttachmentQuery) All(exec boil.Executor) (CardAttachmentSlice, error) {
	var o []*CardAttachment

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CardAttachment slice")
	}

	if len(cardAttachmentAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CardAttachment records in the query.
func (q cardAttachmentQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count card_attachments rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q cardAttachmentQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if card_attachments exists")
	}

	return count > 0, nil
}

// Card pointed to by the foreign key.
func (o *CardAttachment) Card(mods ...qm.QueryMod) cardQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.CardID),
	}

	queryMods = append(queryMods, mods...)

	return Cards(queryMods...)
}

// User pointed to by the foreign key.
func (o *CardAttachment) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadCard allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (cardAttachmentL) LoadCard(e boil.Executor, singular bool, maybeCardAttachment interface{}, mods queries.Applicator) error {
	var slice []*CardAttachment
	var object *CardAttachment

	if singular {
		var ok bool
		object, ok = maybeCardAttachment.(*CardAttachment)
		if !ok {
			object = new(CardAttachment)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCardAttachment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCardAttachment))
			}
		}
	} else {
		s, ok := maybeCardAttachment.(*[]*CardAttachment)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCardAttachment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCardAttachment))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &cardAttachmentR{}
		}
		args = append(args, object.CardID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &cardAttachmentR{}
			}

			for _, a := range args {
				if a == obj.CardID {
					continue Outer
				}
			}

			args = append(args, obj.CardID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`cards`),
		qm.WhereIn(`cards.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Card")
	}

	var resultSlice []*Card
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Card")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for cards")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for cards")
	}

	if len(cardAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Card = foreign
		if foreign.R == nil {
			foreign.R = &cardR{}
		}
		foreign.R.CardAttachments = append(foreign.R.CardAttachments, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CardID == foreign.ID {
				local.R.Card = foreign
				if foreign.R == nil {
					foreign.R = &cardR{}
				}
				foreign.R.CardAttachments = append(foreign.R.CardAttachments, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (cardAttachmentL) LoadUser(e boil.Executor, singular bool, maybeCardAttachment interface{}, mods queries.Applicator) error {
	var slice []*CardAttachment
	var object *CardAttachment

	if singular {
		var ok bool
		object, ok = maybeCardAttachment.(*CardAttachment)
		if !ok {
			object = new(CardAttachment)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCardAttachment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCardAttachment))
			}
		}
	} else {
		s, ok := maybeCardAttachment.(*[]*CardAttachment)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCardAttachment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCardAttachment))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &cardAttachmentR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &cardAttachmentR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.CardAttachments = append(foreign.R.CardAttachments, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.CardAttachments = append(foreign.R.CardAttachments, local)
				break
			}
		}
	}

	return nil
}

// SetCard of the cardAttachment to the related item.
// Sets o.R.Card to related.
// Adds o to related.R.CardAttachments.
func (o *CardAttachment) SetCard(exec boil.Executor, insert bool, related *Card) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `card_attachments` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"card_id"}),
		strmangle.WhereClause("`", "`", 0, cardAttachmentPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CardID = related.ID
	if o.R == nil {
		o.R = &cardAttachmentR{
			Card: related,
		}
	} else {
		o.R.Card = related
	}

	if related.R == nil {
		related.R = &cardR{
			CardAttachments: CardAttachmentSlice{o},
		}
	} else {
		related.R.CardAttachments = append(related.R.CardAttachments, o)
	}

	return nil
}

// SetUser of the cardAttachment to the related item.
// Sets o.R.User to related.
// Adds o to related.R.CardAttachments.
func (o *CardAttachment) SetUser(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `card_attachments` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"user_id"}),
		strmangle.WhereClause("`", "`", 0, cardAttachmentPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &cardAttachmentR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			CardAttachments: CardAttachmentSlice{o},
		}
	} else {
		related.R.CardAttachments = append(related.R.CardAttachments, o)
	}

	return nil
}

// CardAttachments retrieves all the records using an executor.
func CardAttachments(mods ...qm.QueryMod) cardAttachmentQuery {
	mods = append(mods, qm.From("`card_attachments`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`card_attachments`.*"})
	}

	return cardAttachmentQuery{q}
}

// FindCardAttachment retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCardAttachment(exec boil.Executor, iD int, selectCols ...string) (*CardAttachment, error) {
	cardAttachmentObj := &CardAttachment{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `card_attachments` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, cardAttachmentObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from card_attachments")
	}

	if err = cardAttachmentObj.doAfterSelectHooks(exec); err != nil {
		return cardAttachmentObj, err
	}

	return cardAttachmentObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CardAttachment) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no card_attachments provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cardAttachmentColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	cardAttachmentInsertCacheMut.RLock()
	cache, cached := cardAttachmentInsertCache[key]
	cardAttachmentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			cardAttachmentAllColumns,
			cardAttachmentColumnsWithDefault,
			cardAttachmentColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(cardAttachmentType, cardAttachmentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(cardAttachmentType, cardAttachmentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `card_attachments` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `card_attachments` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `card_attachments` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, cardAttachmentPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into card_attachments")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == cardAttachmentMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}
	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for card_attachments")
	}

CacheNoHooks:
	if !cached {
		cardAttachmentInsertCacheMut.Lock()
		cardAttachmentInsertCache[key] = cache
		cardAttachmentInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the CardAttachment.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CardAttachment) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	cardAttachmentUpdateCacheMut.RLock()
	cache, cached := cardAttachmentUpdateCache[key]
	cardAttachmentUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			cardAttachmentAllColumns,
			cardAttachmentPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update card_attachments, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `card_attachments` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, cardAttachmentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(cardAttachmentType, cardAttachmentMapping, append(wl, cardAttachmentPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update card_attachments row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for card_attachments")
	}

	if !cached {
		cardAttachmentUpdateCacheMut.Lock()
		cardAttachmentUpdateCache[key] = cache
		cardAttachmentUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q cardAttachmentQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for card_attachments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for card_attachments")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CardAttachmentSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cardAttachmentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `card_attachments` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cardAttachmentPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in cardAttachment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all cardAttachment")
	}
	return rowsAff, nil
}

var mySQLCardAttachmentUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CardAttachment) Upsert(exec boil.Executor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no card_attachments provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cardAttachmentColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCardAttachmentUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	cardAttachmentUpsertCacheMut.RLock()
	cache, cached := cardAttachmentUpsertCache[key]
	cardAttachmentUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			cardAttachmentAllColumns,
			cardAttachmentColumnsWithDefault,
			cardAttachmentColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			cardAttachmentAllColumns,
			cardAttachmentPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert card_attachments, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`card_attachments`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `card_attachments` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(cardAttachmentType, cardAttachmentMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(cardAttachmentType, cardAttachmentMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for card_attachments")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == cardAttachmentMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(cardAttachmentType, cardAttachmentMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for card_attachments")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}
	err = exec.QueryRow(cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for card_attachments")
	}

CacheNoHooks:
	if !cached {
		cardAttachmentUpsertCacheMut.Lock()
		cardAttachmentUpsertCache[key] = cache
		cardAttachmentUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single CardAttachment record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CardAttachment) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CardAttachment provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cardAttachmentPrimaryKeyMapping)
	sql := "DELETE FROM `card_attachments` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from card_attachments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for card_attachments")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q cardAttachmentQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no cardAttachmentQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from card_attachments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for card_attachments")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CardAttachmentSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(cardAttachmentBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cardAttachmentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `card_attachments` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cardAttachmentPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cardAttachment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for card_attachments")
	}

	if len(cardAttachmentAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CardAttachment) Reload(exec boil.Executor) error {
	ret, err := FindCardAttachment(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CardAttachmentSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CardAttachmentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cardAttachmentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `card_attachments`.* FROM `card_attachments` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cardAttachmentPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CardAttachmentSlice")
	}

	*o = slice

	return nil
}

// CardAttachmentExists checks if the CardAttachment row exists.
func CardAttachmentExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `card_attachments` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if card_attachments exists")
	}

	return exists, nil
}

// Exists checks if the CardAttachment row exists.
func (o *CardAttachment) Exists(exec boil.Executor) (bool, error) {
	return CardAttachmentExists(exec, o.ID)
}
